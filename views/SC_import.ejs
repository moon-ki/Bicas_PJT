<script src="../EAO/web3.js"></script>

<script type="text/javascript">

    //세션정보
    // const user_id = $('#user_id').val();
    // const name = $('#name').val();

    const blockchainid = $('#blockchainid').val();
    const blockchainpwd = $('#blockchainpwd').val();

    //web3 정보
    const provider = 'http://220.76.95.91:8546';
    var Web3 = require('web3');
    var abi = [{"constant":false,"inputs":[{"name":"_contractFile","type":"string"},{"name":"_contractHash","type":"bytes32"}],"name":"issue","outputs":[],"payable":false,"type":"function","stateMutability":"nonpayable"},{"constant":true,"inputs":[],"name":"getContracts","outputs":[{"name":"","type":"bytes32[]"}],"payable":false,"type":"function","stateMutability":"view"},{"constant":true,"inputs":[{"name":"_contractHash","type":"bytes32"}],"name":"getContract","outputs":[{"name":"","type":"address"},{"name":"","type":"string"},{"name":"","type":"bytes32"}],"payable":false,"type":"function","stateMutability":"view"}];
    var addr = '0xd0146B2cBBc5e7F1d2b7247787c9Cd4ee8d40972';
    const web3 = new Web3(new Web3.providers.HttpProvider(provider));
    const contract = web3.eth.contract(abi).at(addr);
    

    // 이더리움 계정 언락
    function unlockAccount(callback){
        $.ajax({
            url: provider,
            type: 'post',
            datatype: 'application/json',
            contentType: 'application/json',
            dataType: 'JSON',
            data: JSON.stringify({
                id: 8,
                jsonrpc: '2.0',
                method: 'personal_unlockAccount',
                params: [blockchainid, blockchainpwd]
            }),
            success: function(data) {
                if(data.result == true) {
                    callback(null);
                } else {
                    callback('fail auth');
                }
            },
            error: function(error) {
                callback(error);
            }
        });   
    }

    //authXML 엔진에 입력데이터와 구조데이터를 post방식의 파라미터로 request & response
    function createXML(callback){

        bxfXmlSaveCspPrepare();
        bxfSearchTextPrepare();

        var inXML = $('#inXMLcontent').val();
        var calXML= $('#calXMLcontent').val();
        var apiKey= '5acda40a5de6a72c70b12679';
        var prams = 'apiKey='+apiKey+'&s_inXML='+inXML+'&s_calXML='+calXML;
        var url = 'http://xmlapi.datafarm.co.kr/soaxmlEngineApi.jsp';
        var client = new XMLHttpRequest();

        client.onreadystatechange = function(){
            if(client.readyState == 4 && client.status == 200) {
                var result = client.responseText.trim();
                callback(result);
            }
        }
        client.open("POST",url,true) ;
        client.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        client.send(prams);
    }

    // 승인버튼을 누를 때마다, 컨트렉트가 생성되고 트랜젝션이 일어난다. 아래의 업무가 있다.
        // 1. 생성된 xml으로 컨트렉트 생성
        // 2. 수수료 송금
        // 3. 트랜젝션 로그 기록
    function ontx(){

        //1. authXML엔진을 통해 xmlString 생성
        createXML(function(xmlString){
            if(xmlString!=''){
                //2. 파일생성
                createFile(xmlString);
            }
        });

        var fileName = createFile();
        console.log(fileName);
        var answer = confirm('신청서를 제출하겠습니까?');

        if(answer){
            //스마트 컨트렉트 생성
            // createContract(fileName, xmlString, function(result){
            //     console.log('createContract: ',xmlString);
            //     if(result =='success'){
            //         //수수료 송금
            //         // sendFee();
            //         saveLog();
            //         alert('신청서를 성공적으로 제출하였습니다.');
            //     }else{
            //         alert('신청서 제출 실패!');
            //     }
            // });
            saveSysLog();
            location.href='/accounts/acceptList';
        }
    }

    //신청내역 저장
    function saveSysLog(){
        var url = new URL($(location).attr('href'));
        var prams = 'form_type='+url.pathname+'&user_id='+$('#user_id').val()+'&name='+$('#name').val();
        var client = new XMLHttpRequest();
        client.open("POST",'saveLog',true) ;
        client.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        client.send(prams);
    }

    // 컨트렉트 생성
    function createContract(fileName, xmlString, callback){

        web3.eth.defaultAccount = blockchainid;
        contract.issue(fileName, web3.sha3(xmlString), {from:blockchainid, gas: 500000});

        callback('success');
    }

    //수수료를 관리자 계정으로 이체
    function sendFee(recodeSeq){

        //1. 이더리움계정 Unlock
        unlockAccount(function(result){
            if(result=='fail auth'){
                alert('계정이 유효하지 않습니다. 관리자에게 문의하세요.');
            }else{
                //2. 관리자 계정으로 수수료 송부
                var t_hash = web3.eth.sendTransaction({
                            from: blockchainid,         //로그인한 사용자 계정
                            to: web3.eth.accounts[0],   //관리자 계정
                            value: web3.toWei(0.1,'ether')
                        });
                alert('t_hash: '+t_hash)    
                
                
                if(t_hash !=''){
                    //3. 수수료납부여부 업데이트
                    var prams1 = 'seq='+recodeSeq;
                    var client1 = new XMLHttpRequest();
                    client1.open("POST",'updateLog',true);
                    client1.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                    client1.send(prams1);

                    //4. 트랜젝션 내역 저장
                    var balance = web3.eth.getBalance(blockchainid);
                    alert(balance);
                    var prams2 = 't_hash='+t_hash+'&from='+blockchainid+'&to='+web3.eth.accounts[0];
                    // var client2 = new XMLHttpRequest();
                    // client2.open("POST",'updateLog',true);
                    // client2.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
                    // client2.send(prams);
                    alert('정상적으로 수수료를 납부하였습니다.');

                    // location.href='/accounts/acceptList'
                    
                }
                //
                
            }
        });
    }

    function createFile(xmlString){
        var curlDate = new Date();
        var fileName = curlDate.getFullYear().toString()+pad((curlDate.getMonth()+1).toString(),2)+pad(curlDate.getDate().toString(),2)+
                    pad(curlDate.getHours(),2)+pad(curlDate.getMinutes(),2)+pad(curlDate.getSeconds(),2)+'.xml';
                    
        return fileName;
    }

    function pad(n, width) {
        n = n + '';//string 변환
        return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
    }   

    function saveSoaxml(){

        unlockAccount(function(error){
            if(error == 'fail auth') {
                alert('인증정보가 올바르지 않습니다.');
            } else if(error) {
                throw error;
            } else {
                // createXML();
                requestSave();
            }
        });
    }

</script>