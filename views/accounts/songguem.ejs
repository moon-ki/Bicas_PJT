 <% include ../header.ejs %>

    <% include ./sidebar.ejs %>
        
        <div class="row">
                <div class="col-md-4 col-md-offset-4">
                    <div class="login-panel panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">Ether 송금</h3>
                        </div>
                        <div class="panel-body">
                            <form role="form" action="" id="songguem_form" method="post">
                                <fieldset>

                                        <h2 id="instructor"></h2>
                                
                                    <div class="form-group">
                                        <li>학번</li>
                                        <input class="form-control" placeholder="" id="user_id" name="user_id" readonly type="text" value="<%= user.user_id %>" required="">
                                    </div>
                                    <div class="form-group">
                                        <li>이름</li>
                                        <input class="form-control" placeholder="" id="user_name" name="user_name" readonly type="text" value="<%= user.user_name %>" required="">
                                    </div>
                                    <div class="form-group">
                                        <li>내 계좌</li>
                                        <input class="form-control" placeholder="" id="blockchainid" name="blockchainid" readonly type="text" value="<%= user.blockchainid %>" required="">
                                    </div>
                                    <div class="form-group">
                                        <input type="hidden" class="form-control" id="blockchainpwd" name="blockchainpwd" readonly type="password" value="<%= user.blockchainpwd %>" required="">
                                    </div>
                                    <div class="form-group">
                                        <li>Ether</li>
                                        <input class="form-control" id="ether" name="ether" type="number" >
                                    </div>
                                    <div class="form-group">
                                        <li>수신 계좌</li>
                                        <input class="form-control" placeholder="" id="otherblockchainid" name="otherblockchainid" type="text" value="송금계좌를 입력하세요" onfocus="if(!this._haschanged){this.value=''};this._haschanged=true;" >
                                    </div>
                                    <!-- 트랜잭션 해쉬 t_hash-->
                                    <div class="form-group">
                                        <input type="hidden" class="form-control" id="t_hash" name="t_hash" type="text" value="" required="" >
                                    </div>
                                    <div class="form-group">
                                        <input type="button" onclick="songgeum();document.getElementById('songguem_form').submit();" value="전송"></input>
                                        <!-- TransactionSave(); -->
                                    </div>
                                </fieldset>
                            </form>
                            <h2 id="instructor"></h2>
                        </div>
                    </div>
                </div>
        </div>


<script type="text/javascript">
        var url = "http://220.76.95.91:8546"; // 서버 URL
        var web3 = new Web3();
        // console.log(web3);
        var provider = new web3.providers.HttpProvider(url); // 블록체인 노드접속
        // console.log(provider);
        web3.setProvider(provider);
        var blockchainid = $("#blockchainid").val();
        var blockchainpwd = $("#blockchainpwd").val();
<<<<<<< HEAD
           
        // web3.eth.defaultAccount = web3.eth.accounts[1];
        // web3.eth.defaultAccount = web3.eth.accounts[blockchainid];
        // var ABI = [{"constant":false,"inputs":[{"name":"_contractFile","type":"string"},{"name":"_contractHash","type":"bytes32"}],"name":"issue","outputs":[],"payable":false,"type":"function","stateMutability":"nonpayable"},{"constant":true,"inputs":[],"name":"getContracts","outputs":[{"name":"","type":"bytes32[]"}],"payable":false,"type":"function","stateMutability":"view"},{"constant":true,"inputs":[{"name":"_contractHash","type":"bytes32"}],"name":"getContract","outputs":[{"name":"","type":"address"},{"name":"","type":"string"},{"name":"","type":"bytes32"}],"payable":false,"type":"function","stateMutability":"view"}];
        // // 연결할 Contract(CounterMaster) 주소 
        // var master = web3.eth.contract(ABI).at("0x618CD4dCB28C6a93e55A95AFc66C6850E19648BE");
        // var CounterAddressList = master.getCounterAddressList();
        // alert(CounterAddressList[0] + '||' + CounterAddressList[1]);

    // 로그인(Unlock)
    function login() {
        var blockchainid = $("#blockchainid").val();
        var blockchainpwd = $("#blockchainpwd").val();
        //alert(blockchainid + "||" + blockchainpwd);
        var JSONdata = createJSONdata("personal_unlockAccount", [ blockchainid, blockchainpwd, 30 ]);
        executeJsonRpc(url, JSONdata, function success(data) {
            //alert(data.error);
            // 로그인 성공
            if (data.error == null) {
                console.log("login success!");
                document.getElementById("instructor").innerHTML = "계정 인증성공";
            } else {
                // 로그인 실패
                console.log("login failure");
                document.getElementById("instructor").innerHTML = "계정 인증실패";
            }
            
        }, function error(data) {
            // 로그인 실패
            console.log("data receive failure");
            document.getElementById("instructor").innerHTML = "관리자에게 문의";
        });
    }
=======
</script>
>>>>>>> 352c026338398a8933023ee23361a2727444d385


<script type="text/javascript">
//이더리움 송금 기능

    function songgeum(){
<<<<<<< HEAD
    
=======

>>>>>>> 352c026338398a8933023ee23361a2727444d385
        var sender = $("#blockchainid").val();
        var senderpwd = $("#blockchainpwd").val();
        var receiver = $("#otherblockchainid").val();
        var eth_cash1 = $("#ether").val();
        var eth_cash = parseInt(eth_cash1);
        
<<<<<<< HEAD
        web3.personal.unlockAccount(sender, senderpwd, 600);
        web3.eth.defaultAccount = web3.eth.accounts[sender];
        
        var JSONdata = createJSONdata("personal_unlockAccount", [ sender, senderpwd, 600 ]);
        
        executeJsonRpc(url, JSONdata, function success(data) {
            
            if (data.error == null) {
            
                if(sender == null && sender == ""){
                    alert("송금자가 확실하지 않음");
                }else if(receiver == null && receiver == ""){
                    alert("수신자가 확실하지 않음");
                }
            
                // 송금 트랜잭션
                var result = web3.eth.sendTransaction({from : sender, to : receiver, value : web3.toWei(eth_cash, 'ether')});
                alert(JSON.stringify(result));
                document.getElementById("instructor").innerHTML = "Ether 송금에 성공하셨습니다.";

            } else {
                // 로그인 실패
                console.log("login failure");
                document.getElementById("instructor").innerHTML = "Ether 송금에 실패하셨습니다.";
            }
            //init();
        }, function error(data) {
            // 로그인 실패
            console.log("data receive failure");
            document.getElementById("instructor").innerHTML = "Data Receive Failure";
        });
}


            // JSON 메시지 생성
=======

        web3.personal.unlockAccount(sender, senderpwd, 600);
        web3.eth.defaultAccount = web3.eth.accounts[sender];
        
        // var JSONdata = createJSONdata("personal_unlockAccount", [ sender, senderpwd, 600 ]);
    
        // executeJsonRpc(url, JSONdata, function success(data) {
            
            // if (data.error == null) {
            
            //     if(sender == null && sender == ""){
            //         alert("송금자가 확실하지 않음");
            //     }else if(receiver == null && receiver == ""){
            //         alert("수신자가 확실하지 않음");
            //     }
            
            // 송금 트랜잭션
            result = web3.eth.sendTransaction({
                            from : sender, 
                            to : receiver, 
                            value : web3.toWei(eth_cash, 'ether')});
            var result2 = web3.eth.getTransaction(result);

            // alert(JSON.stringify(result));
            // alert(JSON.stringify(result2.hash));
            // alert(JSON.stringify(result2.blockNumber));
            
            $("#t_hash").val(JSON.stringify(result2.hash));
            // $("#block_No").val(JSON.stringify(result2.blockNumber));
            // $("#Nonce").val(JSON.stringify(result2.Nonce));



            document.getElementById("instructor").innerHTML = "Ether 송금에 성공하셨습니다.";
            // web3.personal.lockAccount(sender, senderpwd, 600);
            // } else {
            //     // 로그인 실패
                
            //     console.log("login failure");
            //     document.getElementById("instructor").innerHTML = "Ether 송금에 실패하셨습니다.";
            // }
        //init();
    // }, function error(data) {
    //     // 로그인 실패
    //     console.log("data receive failure");
    //     document.getElementById("instructor").innerHTML = "Data Receive Failure";
    // });
    }



    // JSON 메시지 생성
>>>>>>> 352c026338398a8933023ee23361a2727444d385
    function createJSONdata(method, params) {
        var JSONdata = {
            "id":8,
            "jsonrpc" : "2.0",
            "method" : method,
            "params" : params
            };
        return JSONdata;
    }

    // JSON-RPC 실행
    // function executeJsonRpc(url_exec, JSONdata, success, error) {
    //     $.ajax({
    //         type : 'post',
    //         url : url_exec,
    //         data : JSON.stringify(JSONdata),
    //         contentType : 'application/JSON',
    //         dataType : 'JSON',
    //         scriptCharset : 'utf-8',
    //         //scriptCharset : 'euc-kr',
    //         success : function(data) {
    //             //alert(data);
    //             //alert(data.code);
    //             //alert(data.result);
    //             alert('ssssssssssssssssssssssss');
    //             success(data);
    //         },
    //         error : function(data) {
    //             error(data);
    //         }
    //     });
    // }

    // JSON-RPC 실행
    function checkTrResult(hashVal) {
        //var JSONdata = createJSONdata("eth_getTransactionByHash", ["0x9faa7817dd5e926a5fec6adecc3d73d4dc1f3d97d7b8278786aa794646d8c974"]);
        var JSONdata = createJSONdata("eth_getTransactionByHash", [hashVal]);
        executeJsonRpc(url, JSONdata, function success(data) {
            //alert(data.error);
            // 로그인 성공
            if (data.error == null) {
                //alert(data);
                //alert(data.result.blockNumber);ccc
                var rst = parseInt(data.result.blockNumber, 16);
                //alert(rst);
                ///return rst;
                console.log("Result Check success!");
            } else {
                // 로그인 실패
                console.log("Result Check error1111");
            }
            //init();
        }, function error(data) {
            // 로그인 실패ccc
            console.log("Result Check error222");
        });
    }

    // JSON-RPC 실행
    function checkTrResultDisp() {
        //var JSONdata = createJSONdata("eth_getTransactionByHash", ["0x9faa7817dd5e926a5fec6adecc3d73d4dc1f3d97d7b8278786aa794646d8c974"]);
        var JSONdata = createJSONdata("eth_getTransactionByHash", [document.getElementById("trHash").value]);
        executeJsonRpc(url, JSONdata, function success(data) {
            //alert(data.error);
            // 로그인 성공
            if (data.error == null) {
                //alert(data);
                //alert(data.result.blockNumber);
                var rst = parseInt(data.result.blockNumber, 16);
                //alert(rst);
                ///return rst;
                console.log("Result Check success!");
            } else {
                // 로그인 실패
                console.log("Result Check error1111");
            }
            //init();
        }, function error(data) {
            // 로그인 실패ccc
            console.log("Result Check error222");
        });
    }
    </script>
